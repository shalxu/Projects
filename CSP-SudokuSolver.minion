**This AI Project is to use Minion Tool to solve a 4*4*4 Sudoku, through Constraint Satifisfaction**

MINION 3
**VARIABLES**
DISCRETE num[16,4,4]{1..16}

**SEARCH**
PRINT [num]

**TUPLELIST**

**CONSTRAINTS**

#Defining existing variables
eq(num[0,0,0],5)
eq(num[0,0,2],3)
eq(num[0,0,3],4)
eq(num[0,1,1],10)
eq(num[0,1,2],15)
eq(num[0,2,1],9)
eq(num[0,2,3],6)
eq(num[0,3,0],14)

eq(num[1,0,3],1)
eq(num[1,1,1],6)
eq(num[1,2,1],15)
eq(num[1,3,1],12)

eq(num[2,0,0],9)
eq(num[2,0,1],11)
eq(num[2,0,2],7)
eq(num[2,1,0],1)
eq(num[2,2,1],14)
eq(num[2,3,3],10)

eq(num[3,0,0],2)
eq(num[3,2,0],11)
eq(num[3,2,2],16)
eq(num[3,3,0],5)
eq(num[3,3,3],8)

eq(num[4,0,3],2)
eq(num[4,1,0],13)
eq(num[4,2,0],3)
eq(num[4,2,2],11)
eq(num[4,3,0],6)
eq(num[4,3,1],7)
eq(num[4,3,3],1)

eq(num[5,0,1],1)
eq(num[5,0,2],16)
eq(num[5,1,0],7)
eq(num[5,1,1],5)
eq(num[5,2,0],13)
eq(num[5,2,1],8)
eq(num[5,2,3],9)

eq(num[6,0,0],3)
eq(num[6,0,1],9)
eq(num[6,1,0],12)
eq(num[6,1,1],2)
eq(num[6,1,3],15)
eq(num[6,2,0],16)
eq(num[6,2,2],1)
eq(num[6,2,3],14)
eq(num[6,3,1],10)
eq(num[6,3,3],13)

eq(num[7,0,0],13)
eq(num[7,0,1],8)
eq(num[7,1,2],11)
eq(num[7,2,2],15)

eq(num[8,1,1],4)
eq(num[8,2,1],1)
eq(num[8,3,2],10)
eq(num[8,3,3],7)

eq(num[9,0,0],12)
eq(num[9,0,2],1)
eq(num[9,1,0],3)
eq(num[9,1,1],11)
eq(num[9,1,3],10)
eq(num[9,2,0],9)
eq(num[9,2,2],2)
eq(num[9,2,3],6)
eq(num[9,3,2],15)
eq(num[9,3,3],14)

eq(num[10,1,0],6)
eq(num[10,1,2],15)
eq(num[10,1,3],8)
eq(num[10,2,2],13)
eq(num[10,2,3],3)
eq(num[10,3,1],4)
eq(num[10,3,2],5)

eq(num[11,0,0],3)
eq(num[11,0,2],2)
eq(num[11,0,3],4)
eq(num[11,1,1],13)
eq(num[11,1,3],5)
eq(num[11,2,3],15)
eq(num[11,3,0],16)

eq(num[12,0,0],15)
eq(num[12,0,3],8)
eq(num[12,1,1],16)
eq(num[12,1,3],11)
eq(num[12,3,3],3)

eq(num[13,0,0],4)
eq(num[13,1,2],6)
eq(num[13,2,0],15)
eq(num[13,3,1],10)
eq(num[13,3,2],11)
eq(num[13,3,3],8)

eq(num[14,0,2],9)
eq(num[14,1,2],10)
eq(num[14,2,2],4)
eq(num[14,3,0],15)

eq(num[15,0,3],1)
eq(num[15,1,0],15)
eq(num[15,1,2],5)
eq(num[15,2,1],6)
eq(num[15,2,2],8)
eq(num[15,3,0],4)
eq(num[15,3,1],16)
eq(num[15,3,3],2)

#Within each sub-square
alldiff([num[0,_,_]])
alldiff([num[1,_,_]])
alldiff([num[2,_,_]])
alldiff([num[3,_,_]])
alldiff([num[4,_,_]])
alldiff([num[5,_,_]])
alldiff([num[6,_,_]])
alldiff([num[7,_,_]])
alldiff([num[8,_,_]])
alldiff([num[9,_,_]])
alldiff([num[10,_,_]])
alldiff([num[11,_,_]])
alldiff([num[12,_,_]])
alldiff([num[13,_,_]])
alldiff([num[14,_,_]])
alldiff([num[15,_,_]])

#Horizontal rows
alldiff([num[0,0,_],num[1,0,_],num[2,0,_],num[3,0,_]])
alldiff([num[0,1,_],num[1,1,_],num[2,1,_],num[3,1,_]])
alldiff([num[0,2,_],num[1,2,_],num[2,2,_],num[3,2,_]])
alldiff([num[0,3,_],num[1,3,_],num[2,3,_],num[3,3,_]])

alldiff([num[4,0,_],num[5,0,_],num[6,0,_],num[7,0,_]])
alldiff([num[4,1,_],num[5,1,_],num[6,1,_],num[7,1,_]])
alldiff([num[4,2,_],num[5,2,_],num[6,2,_],num[7,2,_]])
alldiff([num[4,3,_],num[5,3,_],num[6,3,_],num[7,3,_]])

alldiff([num[8,0,_],num[9,0,_],num[10,0,_],num[11,0,_]])
alldiff([num[8,1,_],num[9,1,_],num[10,1,_],num[11,1,_]])
alldiff([num[8,2,_],num[9,2,_],num[10,2,_],num[11,2,_]])
alldiff([num[8,3,_],num[9,3,_],num[10,3,_],num[11,3,_]])

alldiff([num[12,0,_],num[13,0,_],num[14,0,_],num[15,0,_]])
alldiff([num[12,1,_],num[13,1,_],num[14,1,_],num[15,1,_]])
alldiff([num[12,2,_],num[13,2,_],num[14,2,_],num[15,2,_]])
alldiff([num[12,3,_],num[13,3,_],num[14,3,_],num[15,3,_]])

#Veritical columns
alldiff([num[0,_,0],num[4,_,0],num[8,_,0],num[12,_,0]])
alldiff([num[0,_,1],num[4,_,1],num[8,_,1],num[12,_,1]])
alldiff([num[0,_,2],num[4,_,2],num[8,_,2],num[12,_,2]])
alldiff([num[0,_,3],num[4,_,3],num[8,_,3],num[12,_,3]])

alldiff([num[1,_,0],num[5,_,0],num[9,_,0],num[13,_,0]])
alldiff([num[1,_,1],num[5,_,1],num[9,_,1],num[13,_,1]])
alldiff([num[1,_,2],num[5,_,2],num[9,_,2],num[13,_,2]])
alldiff([num[1,_,3],num[5,_,3],num[9,_,3],num[13,_,3]])

alldiff([num[2,_,0],num[6,_,0],num[10,_,0],num[14,_,0]])
alldiff([num[2,_,1],num[6,_,1],num[10,_,1],num[14,_,1]])
alldiff([num[2,_,2],num[6,_,2],num[10,_,2],num[14,_,2]])
alldiff([num[2,_,3],num[6,_,3],num[10,_,3],num[14,_,3]])

alldiff([num[3,_,0],num[7,_,0],num[11,_,0],num[15,_,0]])
alldiff([num[3,_,1],num[7,_,1],num[11,_,1],num[15,_,1]])
alldiff([num[3,_,2],num[7,_,2],num[11,_,2],num[15,_,2]])
alldiff([num[3,_,3],num[7,_,3],num[11,_,3],num[15,_,3]])



**EOF**
